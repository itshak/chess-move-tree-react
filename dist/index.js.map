{"version":3,"sources":["../src/index.ts","../src/hooks/useMoveTree.ts","../src/lib/MoveTree.ts"],"sourcesContent":["export * from './hooks/useMoveTree';\nexport * from './lib/MoveNode';\nexport { MoveTree } from './lib/MoveTree';\n","import { useState, useRef, useCallback, useMemo } from \"react\";\nimport { MoveTree } from \"../lib/MoveTree\";\nimport { MoveNode } from \"../lib/MoveNode\";\n\nexport const useMoveTree = (initialFen?: string) => {\n  const moveTree = useRef<MoveTree>(new MoveTree(initialFen));\n  const [currentNode, setCurrentNode] = useState<MoveNode>(\n    moveTree.current.root\n  );\n\n  const addMove = useCallback(\n    (move: string | { from: string; to: string; promotion?: string }) => {\n      const newNode = moveTree.current.addMove(move);\n      if (newNode) setCurrentNode(newNode);\n      return !!newNode;\n    },\n    []\n  );\n\n  const goBack = useCallback(() => {\n    const prevNode = moveTree.current.goBack();\n    if (prevNode) setCurrentNode(prevNode);\n  }, []);\n\n  const goForward = useCallback((variationIndex: number = 0) => {\n    const nextNode = moveTree.current.goForward(variationIndex);\n    if (nextNode) setCurrentNode(nextNode);\n  }, []);\n\n  const goToNode = useCallback((nodeId: string) => {\n    const targetNode = moveTree.current.goToNode(nodeId);\n    if (targetNode) setCurrentNode(targetNode);\n  }, []);\n\n  const reset = useCallback((fen?: string) => {\n    moveTree.current = new MoveTree(fen);\n    setCurrentNode(moveTree.current.root);\n  }, []);\n\n  const loadPgn = useCallback((pgn: string) => {\n    moveTree.current.loadPgn(pgn);\n    setCurrentNode(moveTree.current.root);\n  }, []);\n\n  const toPgn = useCallback(() => {\n    return moveTree.current.toPgn();\n  }, []);\n\n  const fen = currentNode.fen;\n  const mainline = useMemo(\n    () => moveTree.current.getMainline(currentNode),\n    [currentNode]\n  );\n  const lastMove = useMemo(\n    () =>\n      currentNode.parent\n        ? { from: currentNode.from, to: currentNode.to }\n        : null,\n    [currentNode]\n  );\n  const legalMoves = useMemo(\n    () => moveTree.current.getLegalMoves(currentNode),\n    [currentNode]\n  );\n  const turn = useMemo(\n    () => moveTree.current.getTurn(currentNode),\n    [currentNode]\n  );\n\n  return {\n    fen,\n    turn,\n    mainline,\n    lastMove,\n    legalMoves,\n    variations: currentNode.children,\n    currentNode,\n    root: moveTree.current.root,\n    addMove,\n    goBack,\n    goForward,\n    goToNode,\n    reset,\n    loadPgn,\n    toPgn,\n  };\n};\n","import { Chess } from \"chess.js\";\nimport { MoveNode } from \"./MoveNode\";\nimport { PgnReader } from \"@mliebelt/pgn-reader\";\nimport PgnWriter from \"@mliebelt/pgn-writer\";\n\nconst generateId = () => Math.random().toString(36).substring(2, 9);\n\nexport class MoveTree {\n  private chess: Chess;\n  public root: MoveNode;\n  public currentNode: MoveNode;\n\n  constructor(\n    fen: string = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\n  ) {\n    this.chess = new Chess(fen);\n    this.root = this.createNode(null, \"start\", fen, \"a0\", \"a0\");\n    this.currentNode = this.root;\n  }\n\n  private createNode(\n    parent: MoveNode | null,\n    san: string,\n    fen: string,\n    from: string,\n    to: string\n  ): MoveNode {\n    return { id: generateId(), parent, san, fen, from, to, children: [] };\n  }\n\n  public addMove(\n    move: string | { from: string; to: string; promotion?: string }\n  ): MoveNode | null {\n    this.chess.load(this.currentNode.fen);\n    let result;\n    try {\n      result = this.chess.move(move);\n    } catch (e) {\n      return null;\n    }\n    if (!result) return null;\n\n    const existingNode = this.currentNode.children.find(\n      (child) => child.san === result.san\n    );\n    if (existingNode) {\n      this.currentNode = existingNode;\n      return existingNode;\n    }\n\n    const newNode = this.createNode(\n      this.currentNode,\n      result.san,\n      this.chess.fen(),\n      result.from,\n      result.to\n    );\n    this.currentNode.children.push(newNode);\n    this.currentNode = newNode;\n    return newNode;\n  }\n\n  public goBack(): MoveNode | null {\n    if (this.currentNode.parent) {\n      this.currentNode = this.currentNode.parent;\n      this.chess.load(this.currentNode.fen);\n      return this.currentNode;\n    }\n    return null;\n  }\n\n  public goForward(variationIndex: number = 0): MoveNode | null {\n    const childNode = this.currentNode.children[variationIndex];\n    if (childNode) {\n      this.currentNode = childNode;\n      this.chess.load(this.currentNode.fen);\n      return childNode;\n    }\n    return null;\n  }\n\n  public goToNode(nodeId: string): MoveNode | null {\n    const findNode = (node: MoveNode): MoveNode | null => {\n      if (node.id === nodeId) return node;\n      for (const child of node.children) {\n        const found = findNode(child);\n        if (found) return found;\n      }\n      return null;\n    };\n    const targetNode = findNode(this.root);\n    if (targetNode) {\n      this.currentNode = targetNode;\n      this.chess.load(this.currentNode.fen);\n    }\n    return targetNode;\n  }\n\n  public getMainline(node: MoveNode = this.currentNode): MoveNode[] {\n    const line: MoveNode[] = [];\n    let current: MoveNode | null = node;\n    while (current && current.parent) {\n      line.push(current);\n      current = current.parent;\n    }\n    return line.reverse();\n  }\n\n  public getLegalMoves(node: MoveNode = this.currentNode): string[] {\n    this.chess.load(node.fen);\n    return this.chess.moves();\n  }\n\n  public getTurn(node: MoveNode = this.currentNode): \"w\" | \"b\" {\n    this.chess.load(node.fen);\n    return this.chess.turn();\n  }\n\n  public loadPgn(pgn: string) {\n    const reader = new PgnReader({ pgn });\n    const games = reader.getGames();\n    if (!games || games.length === 0) return;\n    const parsedPgn = games[0];\n\n    const startFen =\n      parsedPgn.tags?.[\"FEN\"] ||\n      \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\n    this.chess = new Chess(startFen);\n    this.root = this.createNode(null, \"start\", startFen, \"a0\", \"a0\");\n\n    this.buildTreeFromParsed(parsedPgn.moves, this.root);\n    this.currentNode = this.root;\n    this.chess.load(this.root.fen);\n  }\n\n  private buildTreeFromParsed(moves: any[], parentNode: MoveNode) {\n    if (!moves || moves.length === 0) return;\n    this.chess.load(parentNode.fen);\n    const mainMove = moves[0];\n\n    try {\n      const result = this.chess.move(mainMove.notation.notation);\n      if (result) {\n        const newNode = this.createNode(\n          parentNode,\n          result.san,\n          this.chess.fen(),\n          result.from,\n          result.to\n        );\n        newNode.comment = mainMove.comment;\n        newNode.nags = mainMove.nags;\n        parentNode.children.push(newNode);\n\n        mainMove.variations.forEach((variation: any[]) => {\n          this.buildTreeFromParsed(variation, parentNode);\n        });\n\n        this.buildTreeFromParsed(moves.slice(1), newNode);\n      }\n    } catch (e) {\n      /* Ignore illegal moves in PGN */\n    }\n  }\n\n  public toPgn(): string {\n    const writer = new PgnWriter();\n    const headers = new Map();\n    if (\n      this.root.fen !==\n      \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\n    ) {\n      headers.set(\"FEN\", this.root.fen);\n      headers.set(\"SetUp\", \"1\");\n    }\n    const pgnData = { headers, moves: this.buildPgnMoves(this.root) };\n    return writer.writePgn(pgnData);\n  }\n\n  private buildPgnMoves(node: MoveNode): any[] {\n    if (node.children.length === 0) return [];\n    const mainMoveNode = node.children[0];\n    const mainMovePgn: any = {\n      notation: { notation: mainMoveNode.san },\n      comment: mainMoveNode.comment,\n      nags: mainMoveNode.nags,\n      variations: [],\n    };\n    for (let i = 1; i < node.children.length; i++) {\n      const variationNode = node.children[i];\n      mainMovePgn.variations.push(this.buildPgnMoves(variationNode));\n    }\n    const nextMoves = this.buildPgnMoves(mainMoveNode);\n    return [mainMovePgn, ...nextMoves];\n  }\n}\n"],"mappings":"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","names":["PgnWriter","fen"]}